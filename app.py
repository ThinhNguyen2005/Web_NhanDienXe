"""
H·ªá th·ªëng nh·∫≠n di·ªán xe vi ph·∫°m ƒë√®n ƒë·ªè v√† bi·ªÉn s·ªë xe
===================================================
T√°c gi·∫£: AI Assistant & Th·ªãnh Nguy·ªÖn
Ng√†y t·∫°o: 2025-09-06
Framework: Flask + OpenCV + YOLO + EasyOCR

File ch√≠nh c·ªßa ·ª©ng d·ª•ng Flask, ch·ªãu tr√°ch nhi·ªám x·ª≠ l√Ω c√°c request t·ª´ web,
qu·∫£n l√Ω c√°c ti·∫øn tr√¨nh x·ª≠ l√Ω video v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ cho ng∆∞·ªùi d√πng.
"""
import os
import datetime
import logging
from threading import Thread, Lock

from flask import Flask, render_template, request, jsonify, redirect, url_for, flash, send_file
from werkzeug.utils import secure_filename

# Import c√°c module ƒë√£ ƒë∆∞·ª£c t√°ch
import config
import database
from detector import TrafficViolationDetector
from video_processor import VideoProcessor

# C·∫•u h√¨nh logging ƒë·ªÉ theo d√µi ho·∫°t ƒë·ªông c·ªßa ·ª©ng d·ª•ng
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Kh·ªüi t·∫°o ·ª©ng d·ª•ng Flask
app = Flask(__name__)
# Load c·∫•u h√¨nh t·ª´ file config.py
app.config.from_object(config)

# T·∫°o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt n·∫øu ch√∫ng ch∆∞a t·ªìn t·∫°i
for folder in [config.UPLOAD_FOLDER, config.PROCESSED_FOLDER, config.VIOLATIONS_FOLDER]:
    os.makedirs(folder, exist_ok=True)

# ---- Bi·∫øn to√†n c·ª•c ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i x·ª≠ l√Ω ----
# D√πng dictionary ƒë·ªÉ l∆∞u tr·∫°ng th√°i c·ªßa nhi·ªÅu ti·∫øn tr√¨nh x·ª≠ l√Ω ƒë·ªìng th·ªùi
processing_status = {}
processing_results = {}
# Lock ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n khi nhi·ªÅu lu·ªìng c√πng truy c·∫≠p v√†o c√°c bi·∫øn tr√™n
processing_lock = Lock()
# --------------------------------------------------

# Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng detector, ch·ªâ m·ªôt l·∫ßn khi ·ª©ng d·ª•ng kh·ªüi ƒë·ªông
detector = TrafficViolationDetector()

def allowed_file(filename):
    """Ki·ªÉm tra xem ƒë·ªãnh d·∫°ng file c√≥ ƒë∆∞·ª£c ph√©p hay kh√¥ng."""
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in config.ALLOWED_EXTENSIONS

# ---- ƒê·ªãnh nghƒ©a c√°c Route (ƒë∆∞·ªùng d·∫´n) c·ªßa trang web ----

@app.route('/')
def index():
    """Trang ch·ªß c·ªßa ·ª©ng d·ª•ng."""
    return render_template('index.html')

@app.route('/upload', methods=['GET', 'POST'])
def upload_video():
    """Trang x·ª≠ l√Ω vi·ªác t·∫£i video l√™n."""
    if request.method == 'POST':
        if 'video' not in request.files:
            flash('Kh√¥ng c√≥ file video ƒë∆∞·ª£c ch·ªçn')
            return redirect(request.url)

        file = request.files['video']
        if file.filename == '':
            flash('Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c ch·ªçn')
            return redirect(request.url)

        if file and allowed_file(file.filename):
            # T·∫°o t√™n file an to√†n v√† duy nh·∫•t ƒë·ªÉ tr√°nh tr√πng l·∫∑p
            filename = secure_filename(file.filename)
            timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
            unique_filename = f"{timestamp}_{filename}"
            
            filepath = os.path.join(config.UPLOAD_FOLDER, unique_filename)
            file.save(filepath)

            flash(f'Video "{filename}" ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n th√†nh c√¥ng!')
            # Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang b·∫Øt ƒë·∫ßu x·ª≠ l√Ω video
            return redirect(url_for('process_video_route', filename=unique_filename))
        else:
            flash(f'ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. Ch·ªâ ch·∫•p nh·∫≠n: {", ".join(config.ALLOWED_EXTENSIONS)}')
            return redirect(request.url)

    return render_template('upload.html')

@app.route('/process/<filename>')
def process_video_route(filename):
    """
    B·∫Øt ƒë·∫ßu m·ªôt ti·∫øn tr√¨nh x·ª≠ l√Ω video m·ªõi trong m·ªôt lu·ªìng ri√™ng.
    """
    filepath = os.path.join(config.UPLOAD_FOLDER, filename)
    if not os.path.exists(filepath):
        flash('File kh√¥ng t·ªìn t·∫°i.')
        return redirect(url_for('upload_video'))

    # T·∫°o m·ªôt ID duy nh·∫•t cho ti·∫øn tr√¨nh n√†y (job_id)
    job_id = os.path.splitext(filename)[0]

    # Kh·ªüi t·∫°o tr·∫°ng th√°i ban ƒë·∫ßu cho ti·∫øn tr√¨nh
    with processing_lock:
        processing_status[job_id] = {'status': 'starting', 'progress': 0}

    # T·∫°o v√† b·∫Øt ƒë·∫ßu lu·ªìng x·ª≠ l√Ω video
    processor = VideoProcessor(filepath, detector)
    thread = Thread(target=processor.process_video, args=(job_id, processing_status, processing_results, processing_lock))
    thread.daemon = True # Lu·ªìng s·∫Ω t·ª± k·∫øt th√∫c khi ch∆∞∆°ng tr√¨nh ch√≠nh k·∫øt th√∫c
    thread.start()

    # Tr·∫£ v·ªÅ trang hi·ªÉn th·ªã ti·∫øn tr√¨nh x·ª≠ l√Ω
    return render_template('processing.html', job_id=job_id, filename=filename)

@app.route('/status/<job_id>')
def get_status(job_id):
    """
    API endpoint ƒë·ªÉ frontend c√≥ th·ªÉ ki·ªÉm tra tr·∫°ng th√°i x·ª≠ l√Ω c·ªßa m·ªôt video.
    Tr·∫£ v·ªÅ d·ªØ li·ªáu d·∫°ng JSON.
    """
    with processing_lock:
        status = processing_status.get(job_id, {'status': 'not_found'})
    return jsonify(status)

@app.route('/results/<job_id>')
def show_results(job_id):
    """Hi·ªÉn th·ªã trang k·∫øt qu·∫£ sau khi x·ª≠ l√Ω xong."""
    status = processing_status.get(job_id, {})
    results = processing_results.get(job_id, {})

    if status.get('status') != 'completed':
        flash('Qu√° tr√¨nh x·ª≠ l√Ω video ch∆∞a ho√†n t·∫•t ho·∫∑c ƒë√£ x·∫£y ra l·ªói.')
        return redirect(url_for('process_video_route', filename=f"{job_id}.{list(config.ALLOWED_EXTENSIONS)[0]}"))

    return render_template('results.html', 
                         job_id=job_id, 
                         status=status, 
                         violations=results.get('violations', []))

@app.route('/search', methods=['GET', 'POST'])
def search_violations():
    """Trang tra c·ª©u c√°c vi ph·∫°m ƒë√£ ƒë∆∞·ª£c l∆∞u trong c∆° s·ªü d·ªØ li·ªáu."""
    violations = []
    search_query = ''

    if request.method == 'POST':
        search_query = request.form.get('license_plate', '').strip().upper()
        if search_query:
            # G·ªçi h√†m t√¨m ki·∫øm t·ª´ module database
            violations = database.search_violations_by_plate(search_query)
            if not violations:
                flash(f'Kh√¥ng t√¨m th·∫•y vi ph·∫°m n√†o cho bi·ªÉn s·ªë "{search_query}"')
        else:
            flash('Vui l√≤ng nh·∫≠p bi·ªÉn s·ªë xe ƒë·ªÉ t√¨m ki·∫øm.')

    return render_template('search.html', violations=violations, search_query=search_query)

@app.route('/download/<job_id>')
def download_processed_video(job_id):
    """Cho ph√©p ng∆∞·ªùi d√πng t·∫£i xu·ªëng video ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω."""
    results = processing_results.get(job_id, {})
    output_video = results.get('output_video')
    
    if output_video and os.path.exists(output_video):
        return send_file(output_video, as_attachment=True)
    else:
        flash('Kh√¥ng t√¨m th·∫•y file video ƒë√£ x·ª≠ l√Ω.')
        return redirect(url_for('index'))

@app.route('/violation_image/<job_id>/<int:violation_id>')
def get_violation_image(job_id, violation_id):
    """Hi·ªÉn th·ªã h√¨nh ·∫£nh c·ªßa m·ªôt vi ph·∫°m c·ª• th·ªÉ."""
    image_path = os.path.join(config.VIOLATIONS_FOLDER, f'violation_{job_id}_{violation_id}.jpg')
    if os.path.exists(image_path):
        return send_file(image_path)
    return "Image not found", 404

# ---- ƒêi·ªÉm kh·ªüi ch·∫°y c·ªßa ·ª©ng d·ª•ng ----
if __name__ == '__main__':
    # Kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu khi b·∫Øt ƒë·∫ßu ch·∫°y app
    database.init_database()

    logger.info("üöÄ Starting Traffic Violation Detection System...")
    logger.info("üì± Access the app at: http://localhost:5000")
    
    # Ch·∫°y Flask app ·ªü ch·∫ø ƒë·ªô debug, cho ph√©p ƒëa lu·ªìng
    app.run(debug=True, host='0.0.0.0', port=5000, threaded=True)
