"""
H·ªá th·ªëng nh·∫≠n di·ªán xe vi ph·∫°m ƒë√®n ƒë·ªè v√† bi·ªÉn s·ªë xe
===================================================
File ch√≠nh c·ªßa ·ª©ng d·ª•ng Flask.
Ch·ªãu tr√°ch nhi·ªám x·ª≠ l√Ω c√°c request t·ª´ web, qu·∫£n l√Ω c√°c ti·∫øn tr√¨nh x·ª≠ l√Ω video
v√† tr·∫£ v·ªÅ k·∫øt qu·∫£ cho ng∆∞·ªùi d√πng.
"""
import os
import datetime
import logging
import cv2
from threading import Thread, Lock

from flask import Flask, render_template, request, jsonify, redirect, url_for, flash, send_file, Response
from werkzeug.utils import secure_filename

# Import c√°c module ƒë√£ ƒë∆∞·ª£c t√°ch
import config
import database
from detector_manager import TrafficViolationDetector
from video_processor import VideoProcessor
from roi_manager_enhanced import save_rois, load_rois

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Kh·ªüi t·∫°o Flask App
app = Flask(__name__)
app.secret_key = config.SECRET_KEY
app.config['MAX_CONTENT_LENGTH'] = config.MAX_CONTENT_LENGTH


# T·∫°o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt
for folder in [config.UPLOAD_FOLDER, config.PROCESSED_FOLDER, config.VIOLATIONS_FOLDER]:
    os.makedirs(folder, exist_ok=True)

# ---- Bi·∫øn to√†n c·ª•c ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i v√† k·∫øt qu·∫£ ----
processing_status = {}
processing_results = {}
processing_lock = Lock()
# B·ªï sung bi·∫øn realtime ƒë·ªÉ tr√°nh l·ªói NameError khi stream
realtime_processing = {}
realtime_lock = Lock()

# ---- KH·ªûI T·∫†O MODEL AI M·ªòT L·∫¶N DUY NH·∫§T ----
# Model s·∫Ω ƒë∆∞·ª£c n·∫°p v√†o b·ªô nh·ªõ khi ·ª©ng d·ª•ng kh·ªüi ƒë·ªông v√† t√°i s·ª≠ d·ª•ng cho t·∫•t c·∫£ c√°c request.
logger.info("Initializing AI models globally...")

# Ki·ªÉm tra v√† log device (GPU/CPU)
try:
    import torch
    if torch.cuda.is_available():
        device_name = torch.cuda.get_device_name(0)
        cuda_version = torch.version.cuda
        vram_gb = torch.cuda.get_device_properties(0).total_memory / 1024**3
        logger.info(f"üî• GPU detected: {device_name} (CUDA {cuda_version}, {vram_gb:.1f}GB VRAM)")
        logger.info("‚úì Initializing models with GPU acceleration...")
    else:
        logger.info("‚úì Using CPU for processing (GPU not available)")
except ImportError:
    logger.info("‚úì PyTorch not available, using CPU fallback")

detector = TrafficViolationDetector()
logger.info("‚úì Global detector initialized.")


def allowed_file(filename):
    """Ki·ªÉm tra ƒëu√¥i file c√≥ ƒë∆∞·ª£c ph√©p hay kh√¥ng."""
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in config.ALLOWED_EXTENSIONS

# ---- C√°c Route c·ªßa Flask ----

@app.route('/')
def index():
    """Trang ch·ªß c·ªßa ·ª©ng d·ª•ng."""
    return render_template('index.html')

@app.route('/roi_config')
def roi_config():
    """
    Trang c·∫•u h√¨nh ROI v√† v·∫°ch d·ª´ng
    """
    # L·∫•y danh s√°ch video ƒë√£ upload
    videos = []
    
    # T·ª´ th∆∞ m·ª•c uploads
    if os.path.exists(config.UPLOAD_FOLDER):
        for file in os.listdir(config.UPLOAD_FOLDER):
            if file.lower().endswith(('.mp4', '.avi', '.mov', '.mkv')):
                videos.append({
                    'name': file,
                    'path': os.path.join('uploads', file)
                })
    
    # T·ª´ th∆∞ m·ª•c processed
    if os.path.exists(config.PROCESSED_FOLDER):
        for file in os.listdir(config.PROCESSED_FOLDER):
            if file.lower().endswith(('.mp4', '.avi', '.mov', '.mkv')):
                videos.append({
                    'name': f"[Processed] {file}",
                    'path': os.path.join('processed', file)
                })
    
    return render_template('roi_config.html', videos=videos)

@app.route('/api/get_video/<path:video_path>')
def get_video(video_path):
    """
    Tr·∫£ v·ªÅ file video ƒë·ªÉ xem trong tr√¨nh duy·ªát
    """
    if '..' in video_path or video_path.startswith('/'):
        return "Access denied", 403
    
    full_path = os.path.join(config.PROJECT_ROOT, video_path)
    if not os.path.exists(full_path):
        return "File not found", 404
    
    return send_file(full_path, as_attachment=False)

@app.route('/api/save_roi', methods=['POST'])
def save_roi():
    """
    API ƒë·ªÉ l∆∞u c·∫•u h√¨nh ROI
    """
    try:
        data = request.json
        if not data:
            return jsonify({"success": False, "error": "No data provided"})
        
        camera_id = data.get('camera_id', 'default')
        waiting_zone = data.get('waiting_zone', [])
        violation_zone = data.get('violation_zone', [])
        
        save_rois(camera_id, waiting_zone, violation_zone)
        
        return jsonify({"success": True})
    
    except Exception as e:
        logger.error(f"Error saving ROI: {e}")
        return jsonify({"success": False, "error": str(e)})

@app.route('/api/load_roi/<camera_id>')
def load_roi(camera_id):
    """
    API ƒë·ªÉ t·∫£i c·∫•u h√¨nh ROI
    """
    try:
        waiting_zone, violation_zone = load_rois(camera_id)
        
        return jsonify({
            "success": True,
            "data": {
                "waiting_zone": waiting_zone,
                "violation_zone": violation_zone
            }
        })
    
    except Exception as e:
        logger.error(f"Error loading ROI: {e}")
        return jsonify({"success": False, "error": str(e)})

@app.route('/upload', methods=['GET', 'POST'])
def upload_video():
    """Trang x·ª≠ l√Ω vi·ªác t·∫£i video l√™n."""
    if request.method == 'POST':
        if 'video' not in request.files:
            flash('Kh√¥ng c√≥ file n√†o trong request')
            return redirect(request.url)
        file = request.files['video']
        if file.filename == '':
            flash('Ch∆∞a ch·ªçn file n√†o ƒë·ªÉ upload')
            return redirect(request.url)
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            filepath = os.path.join(config.UPLOAD_FOLDER, filename)
            file.save(filepath)
            video_path = os.path.join(config.UPLOAD_FOLDER, filename)
            flash(f'Video "{filename}" ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n. Vui l√≤ng thi·∫øt l·∫≠p ROI tr∆∞·ªõc khi x·ª≠ l√Ω.', 'info')
            return redirect(url_for('roi_config', video_for_setup=video_path))
            # return redirect(url_for('process_video_route', filename=filename))
        else:
            flash(f"ƒê·ªãnh d·∫°ng file kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n: {', '.join(config.ALLOWED_EXTENSIONS)}")
            return redirect(request.url)
    return render_template('upload.html')

@app.route('/process/<filename>')
def process_video_route(filename):
    """
    Ki·ªÉm tra c·∫•u h√¨nh ROI v√† b·∫Øt ƒë·∫ßu ti·∫øn tr√¨nh x·ª≠ l√Ω video trong m·ªôt lu·ªìng ri√™ng.
    """
    filepath = os.path.join(config.UPLOAD_FOLDER, filename)
    if not os.path.exists(filepath):
        flash('File kh√¥ng t·ªìn t·∫°i.', 'danger')
        return redirect(url_for('upload_video'))

    # --- LOGIC M·ªöI ƒê∆Ø·ª¢C TH√äM V√ÄO ---
    # L·∫•y camera_id t·ª´ t√™n file ƒë·ªÉ ki·ªÉm tra xem ROI ƒë√£ t·ªìn t·∫°i ch∆∞a
    camera_id = os.path.splitext(filename)[0]
    waiting_zone, violation_zone = load_rois(camera_id)

    # N·∫øu kh√¥ng c√≥ ROI cho camera_id c·ª• th·ªÉ, th·ª≠ t·∫£i ROI "default"
    if not violation_zone:
        logger.info(f"Kh√¥ng t√¨m th·∫•y ROI cho '{camera_id}', ƒëang th·ª≠ t·∫£i ROI 'default'...")
        waiting_zone, violation_zone = load_rois("default")

    # N·∫øu v·∫´n kh√¥ng c√≥ ROI n√†o ƒë∆∞·ª£c c·∫•u h√¨nh, chuy·ªÉn h∆∞·ªõng ng∆∞·ªùi d√πng ƒë·∫øn trang thi·∫øt l·∫≠p
    if not violation_zone:
        flash(f"Ch∆∞a c√≥ c√†i ƒë·∫∑t ROI cho video '{filename}'. Vui l√≤ng thi·∫øt l·∫≠p tr∆∞·ªõc khi x·ª≠ l√Ω.", "warning")
        # Truy·ªÅn ƒë∆∞·ªùng d·∫´n c·ªßa video ƒë·ªÉ trang roi_config c√≥ th·ªÉ t·ª± ƒë·ªông t·∫£i n√≥
        video_path = os.path.join(config.UPLOAD_FOLDER, filename)
        return redirect(url_for('roi_config', video_for_setup=video_path))
    # --- K·∫æT TH√öC LOGIC M·ªöI ---

    # N·∫øu c√≥ ROI, ti·∫øn h√†nh x·ª≠ l√Ω nh∆∞ b√¨nh th∆∞·ªùng
    job_id = f"{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}_{camera_id}"

    with processing_lock:
        processing_status[job_id] = {'status': 'starting', 'progress': 0}

    # Truy·ªÅn ƒë·ªëi t∆∞·ª£ng `detector` ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o to√†n c·ª•c v√†o VideoProcessor.
    processor = VideoProcessor(filepath, detector)
    thread = Thread(target=processor.process_video, args=(job_id, processing_status, processing_results, processing_lock))
    thread.daemon = True
    thread.start()

    return render_template('processing.html', job_id=job_id, filename=filename)

@app.route('/status/<job_id>')
def get_status(job_id):
    """API endpoint ƒë·ªÉ frontend l·∫•y th√¥ng tin ti·∫øn tr√¨nh x·ª≠ l√Ω."""
    with processing_lock:
        status = processing_status.get(job_id, {'status': 'not_found'})
    return jsonify(status)

@app.route('/api/live_summary')
def live_summary():
    """T√≥m t·∫Øt s·ªë vi ph·∫°m trong phi√™n live hi·ªán t·∫°i theo video_name (query)."""
    video_name = request.args.get('video')
    if not video_name:
        return jsonify({'success': False, 'error': 'missing video'}), 400

    # L·∫•y processor ƒëang ch·∫°y
    try:
        with realtime_lock:
            processor = realtime_processing.get(video_name)
        if processor is None:
            return jsonify({'success': False, 'error': 'no active live session'}), 404
        summary = processor.get_live_summary()
        return jsonify({'success': True, 'data': summary})
    except Exception as e:
        logger.error(f"live_summary error: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/results/<job_id>')
def show_results(job_id):
    """Hi·ªÉn th·ªã trang k·∫øt qu·∫£ sau khi x·ª≠ l√Ω xong ho·∫∑c t·ª´ l·ªãch s·ª≠."""
    # L·∫•y tr·∫°ng th√°i x·ª≠ l√Ω (n·∫øu c√≤n trong RAM)
    with processing_lock:
        status = processing_status.get(job_id, {})
        results = processing_results.get(job_id, {})

    # N·∫øu kh√¥ng c√≤n d·ªØ li·ªáu trong RAM, ho·∫∑c status ch∆∞a completed -> l·∫•y t·ª´ DB
    if not status or status.get('status') != 'completed':
        # T·∫°o status gi·∫£ t·ª´ database
        violations = database.get_violations_by_job_id(job_id)
        total_frames = 0  # N·∫øu mu·ªën, c√≥ th·ªÉ l∆∞u s·ªë frame v√†o processed_videos
        status = {
            'status': 'completed',
            'progress': 100,
            'violations_found': len(violations),
            'output_video': database.get_output_video_by_job_id(job_id),
            'total_frames': total_frames
        }
        results = {'violations': violations}
    else:
        # Status ƒë√£ completed trong RAM nh∆∞ng kh√¥ng c√≥ results -> fallback DB
        if not results or not results.get('violations'):
            violations = database.get_violations_by_job_id(job_id)
            status.setdefault('violations_found', len(violations))
            results = {'violations': violations}

    return render_template('results.html',
                          job_id=job_id,
                          status=status,
                          violations=results.get('violations', []))

@app.route('/search', methods=['GET', 'POST'])
def search_violations():
    """Trang t√¨m ki·∫øm c√°c vi ph·∫°m trong CSDL."""
    violations = []
    search_query = request.form.get('license_plate', '').strip()

    if request.method == 'POST' and search_query:
        try:
            violations = database.search_by_plate(search_query)
        except Exception as e:
            logger.error(f"L·ªói khi t√¨m ki·∫øm bi·ªÉn s·ªë '{search_query}': {e}")
            flash('ƒê√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh t√¨m ki·∫øm.')
            
    return render_template('search.html', violations=violations, search_query=search_query)


@app.route('/download/<job_id>')
def download_processed_video(job_id):
    output_video = database.get_output_video_by_job_id(job_id)
    if output_video:
        output_video_path = os.path.join(config.PROCESSED_FOLDER, output_video)
        if os.path.exists(output_video_path):
            return send_file(output_video_path, as_attachment=True)
    flash(f'Kh√¥ng t√¨m th·∫•y file video ƒë√£ x·ª≠ l√Ω cho ID: {job_id}')
    return redirect(url_for('history'))


@app.route('/violation_image/<job_id>/<violation_id>')
def get_violation_image(job_id, violation_id):
    """Hi·ªÉn th·ªã ·∫£nh vi ph·∫°m v·ªõi c∆° ch·∫ø fallback t∆∞∆°ng th√≠ch d·ªØ li·ªáu c≈©."""
    # 1) Th·ª≠ tr·ª±c ti·∫øp theo tham s·ªë hi·ªán t·∫°i (track_id m·ªõi ho·∫∑c id c≈© n·∫øu tr√πng h·ª£p)
    direct_path = os.path.join(config.VIOLATIONS_FOLDER, f'violation_{job_id}_{violation_id}.jpg')
    if os.path.exists(direct_path):
        return send_file(direct_path)

    # 2) N·∫øu tham s·ªë l√† ID trong DB, tra DB ƒë·ªÉ map sang track_id r·ªìi th·ª≠ l·∫°i
    track_id = None
    if str(violation_id).isdigit():
        try:
            conn = database.get_db_connection()
            cursor = conn.cursor()
            cursor.execute('SELECT track_id FROM violations WHERE id = ? AND job_id = ?', (int(violation_id), job_id))
            row = cursor.fetchone()
            conn.close()
            if row and row['track_id'] is not None:
                track_id = row['track_id']
        except Exception as e:
            logger.error(f"Error mapping DB id to track_id for job {job_id}: {e}")

    if track_id is not None:
        mapped_path = os.path.join(config.VIOLATIONS_FOLDER, f'violation_{job_id}_{track_id}.jpg')
        if os.path.exists(mapped_path):
            return send_file(mapped_path)

    # 3) Fallback cu·ªëi: n·∫øu ch·ªâ c√≥ ƒë√∫ng 1 ·∫£nh cho job_id th√¨ tr·∫£ v·ªÅ ·∫£nh ƒë√≥ (gi·∫£m 404 d·ªØ li·ªáu c≈©)
    try:
        import glob
        candidates = glob.glob(os.path.join(config.VIOLATIONS_FOLDER, f'violation_{job_id}_*.jpg'))
        if len(candidates) == 1:
            return send_file(candidates[0])
    except Exception:
        pass

    return "Kh√¥ng t√¨m th·∫•y ·∫£nh", 404


@app.route('/history')
def history():
    """Trang l·ªãch s·ª≠ c√°c video ƒë√£ x·ª≠ l√Ω."""
    videos = database.get_processed_videos()
    return render_template('history.html', videos=videos)


@app.route('/violation_history/<job_id>')
def violation_history(job_id):
    """Trang hi·ªÉn th·ªã chi ti·∫øt vi ph·∫°m c·ªßa m·ªôt video c·ª• th·ªÉ."""
    violations = database.get_violations_by_job_id(job_id)
    return render_template('results.html', 
                         job_id=job_id,
                         status={'status': 'completed', 'progress': 100},
                         violations=violations)

@app.route('/delete_history/<job_id>', methods=['POST'])
def delete_history(job_id):
    """X√≥a to√†n b·ªô l·ªãch s·ª≠ vi ph·∫°m v√† video ƒë√£ x·ª≠ l√Ω c·ªßa m·ªôt job."""
    try:
        # X√≥a vi ph·∫°m
        violations_deleted = database.delete_violations_by_job_id(job_id)
        
        # X√≥a video ƒë√£ x·ª≠ l√Ω
        conn = database.get_db_connection()
        cursor = conn.cursor()
        cursor.execute('DELETE FROM processed_videos WHERE job_id = ?', (job_id,))
        videos_deleted = cursor.rowcount
        conn.commit()
        conn.close()
        
        if violations_deleted or videos_deleted:
            flash(f"ƒê√£ x√≥a l·ªãch s·ª≠ cho video {job_id}.", "success")
        else:
            flash(f"Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ƒë·ªÉ x√≥a cho video {job_id}.", "warning")
    except Exception as e:
        logger.error(f"L·ªói khi x√≥a l·ªãch s·ª≠ cho video {job_id}: {e}")
        flash(f"L·ªói khi x√≥a l·ªãch s·ª≠ cho video {job_id}.", "danger")
    
    return redirect(url_for('history'))


def generate_frames(video_name):
    """ X·ª≠ l√Ω v√† stream t·ª´ng frame c·ªßa video. """
    # ∆Øu ti√™n l·∫•y t·ª´ uploads, n·∫øu kh√¥ng c√≥ th√¨ th·ª≠ processed
    uploads_path = os.path.join(config.UPLOAD_FOLDER, video_name)
    processed_path = os.path.join(config.PROCESSED_FOLDER, video_name)
    video_path = uploads_path if os.path.exists(uploads_path) else processed_path
    if not os.path.exists(video_path):
        return
    processor = VideoProcessor(video_path, detector)
    # L∆∞u processor ƒë·ªÉ c√≥ th·ªÉ l·∫•y th·ªëng k√™ realtime
    with realtime_lock:
        realtime_processing[video_name] = processor

    cap = cv2.VideoCapture(video_path)
    if not cap.isOpened():
        return

    camera_id = os.path.splitext(video_name)[0]
    waiting_zone_pts, violation_zone_pts = load_rois(camera_id)
    if not violation_zone_pts or not waiting_zone_pts:
        waiting_zone_pts, violation_zone_pts = load_rois("default")

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break
        
        processed_frame = processor.process_single_frame(frame, waiting_zone_pts, violation_zone_pts)
        
        ret, buffer = cv2.imencode('.jpg', processed_frame)
        if not ret:
            continue
        
        frame_bytes = buffer.tobytes()
        yield (b'--frame\r\n'
               b'Content-Type: image/jpeg\r\n\r\n' + frame_bytes + b'\r\n')
    
    cap.release()
    # K·∫øt th√∫c: lo·∫°i b·ªè processor kh·ªèi b·∫£ng realtime
    with realtime_lock:
        try:
            if realtime_processing.get(video_name) is processor:
                del realtime_processing[video_name]
        except Exception:
            pass

@app.route('/video_feed/<video_name>')
def video_feed(video_name):
    """ Route ƒë·ªÉ tr·∫£ v·ªÅ lu·ªìng video ƒë√£ x·ª≠ l√Ω. """
    return Response(generate_frames(video_name),
                    mimetype='multipart/x-mixed-replace; boundary=frame')
if __name__ == '__main__':
    database.init_database()
    logger.info("üöÄ Starting Traffic Violation Detection System...")
    logger.info("üì± Access the app at: http://localhost:5000")
    app.run(host=config.HOST, port=config.PORT, debug=config.DEBUG)